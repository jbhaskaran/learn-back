const decoratorHandlers = require('./decorators')

const getPropertyName = decorator => {
  if (typeof decorator === 'object') {
    return decorator.name
  }
  return decorator
}

const getDecoratorName = decorator => {
  if (typeof decorator === 'object') {
    return decorator.decorator
  }
  return decorator
}

const run = async ({ object, decorators }) => {
  if (Array.isArray(object)) {
    return await runArray({ object, decorators })
  }
  if (Array.isArray(decorators)) {
    await Promise.all(
      decorators.map(async decorator => {
        const propertyName = getPropertyName(decorator)
        const decoratorName = getDecoratorName(decorator)
        const fn = decoratorHandlers[decoratorName]
        object[propertyName] = await fn({ object, propertyName }) // eslint-disable-line require-atomic-updates
      })
    )
  }
  return object
}

const runArray = async ({ object, decorators }) => {
  for (let i in object) {
    await run({ object: object[i], decorators })
  }
  return object
}

module.exports = run
