const decorate = require('./decorate')
const validate = require('./validate')
const store = require('./store')
const authorize = require('./authorize')
const defaultHandlers = require('./pathHandlers')

const path = require('path')
const APP_PATH = process.env.APP_PATH || `${__dirname}/../skel`

const appHandlers = require(path.resolve(APP_PATH, 'back/handlers'))

const DEFAULT_ID_NAME = 'id'
const handlers = { ...appHandlers, ...defaultHandlers }

const getName = ({ reqPath, pathDefn }) =>
  pathDefn.back.objectName || reqPath.split('/')[1]
const getRelation = reqPath => reqPath.split('/')[3]
const getBodyId = ({ body, idName, reqPath }) =>
  body[idName] || getPathId(reqPath)
const getPathId = reqPath => reqPath.split('/')[2] || null
const getIdName = ({ pathDefn }) => pathDefn.back.idName || DEFAULT_ID_NAME
const getPathHandlerName = (reqPath, method) =>
  `${reqPath
    .replace(/^\//, '')
    .replace(/\/:?([A-Za-z0-9])/g, (m, p1) => p1.toUpperCase())}${method}`

module.exports = {
  get: async (context, pathDefn) => {
    const isAuthorized = await authorize({ context, pathDefn, store })
    if (isAuthorized) {
      const name = getName({ reqPath: context.path, pathDefn })
      const relation = getRelation(context.path)
      const idName = getIdName({ pathDefn })
      const id = getPathId(context.path)
      let getFromPrimary = true
      if (handlers[getPathHandlerName(context.request.route.path, 'Get')]) {
        getFromPrimary = await handlers[
          getPathHandlerName(context.request.route.path, 'Get')
        ]({
          context,
          id,
          idName,
          name,
          pathDefn,
          relation,
          store
        })
      }
      if (getFromPrimary) {
        if (pathDefn.back.pathHandler) {
          await handlers[pathDefn.back.pathHandler].get({
            context,
            id,
            idName,
            name,
            pathDefn
          })
        } else {
          const storeName = pathDefn.back.storeName || 'primary'
          // eslint-disable-next-line require-atomic-updates
          context.body = await store.get({
            storeName,
            query: context.request.query,
            name,
            id,
            idName,
            relation,
            pathDefn
          })
        }
      }
    }
  },
  post: async (context, pathDefn) => {
    const isAuthorized = await authorize({ context, pathDefn, store })
    if (isAuthorized) {
      const name = getName({ reqPath: context.path, pathDefn })
      const validResult = await validate.run({
        objectName: name,
        objectDefinition: pathDefn.parameters[0].schema,
        body: context.request.body
      })
      if (!validResult.valid) {
        context.body = validResult.errors // eslint-disable-line require-atomic-updates
        context.status = 400 // eslint-disable-line require-atomic-updates
      } else {
        const object = await decorate({
          decorators: pathDefn.back.decorators,
          object: context.request.body
        })
        let saveToPrimary = true
        if (handlers[getPathHandlerName(context.path, 'Post')]) {
          saveToPrimary = await handlers[
            getPathHandlerName(context.path, 'Post')
          ]({
            context,
            name,
            object,
            pathDefn,
            store
          })
        }
        if (saveToPrimary === true) {
          if (pathDefn.back.pathHandler) {
            await handlers[pathDefn.back.pathHandler].add({
              context,
              name,
              object,
              pathDefn,
              store
            })
          } else {
            const storeName = pathDefn.back.storeName || 'primary'
            const result = await store.add({ storeName, name, object })
            if (!context.body) {
              context.body = result // eslint-disable-line require-atomic-updates
            }
          }
        }
      }
    }
  },
  put: async (context, pathDefn) => {
    const name = getName({ reqPath: context.path, pathDefn })
    const idName = getIdName({ pathDefn })
    const id = getBodyId({
      body: context.request.body,
      idName,
      reqPath: context.path
    })
    const validResult = await validate.run({
      objectName: name,
      objectDefinition: pathDefn.parameters[0].schema,
      body: context.request.body
    })
    const object = await decorate({
      decorators: pathDefn.back.decorators,
      object: context.request.body
    })
    const isAuthorized = await authorize({
      context,
      pathDefn,
      store,
      name,
      idName,
      id,
      object
    })
    if (isAuthorized) {
      if (!validResult.valid) {
        context.body = validResult.errors // eslint-disable-line require-atomic-updates
        context.status = 400 // eslint-disable-line require-atomic-updates
      } else {
        let saveToPrimary = true
        if (handlers[getPathHandlerName(context.request.route.path, 'Put')]) {
          saveToPrimary = await handlers[
            getPathHandlerName(context.request.route.path, 'Put')
          ]({
            context,
            name,
            idName,
            id,
            object,
            pathDefn,
            store
          })
        }
        if (idName === 'id') {
          delete object[idName]
        }
        if (saveToPrimary === true) {
          if (pathDefn.back.pathHandler) {
            await handlers[pathDefn.back.pathHandler].update({
              context,
              name,
              idName,
              id,
              object,
              pathDefn,
              store
            })
          } else {
            const storeName = pathDefn.back.storeName || 'primary'
            const result = await store.update({
              storeName,
              name,
              idName,
              id,
              object
            })
            if (!context.body) {
              context.body = result // eslint-disable-line require-atomic-updates
            }
          }
        }
      }
    }
  },
  delete: async (context, pathDefn) => {
    const isAuthorized = await authorize({ context, pathDefn, store })
    if (isAuthorized) {
      const name = getName({ reqPath: context.path, pathDefn })
      const id = getBodyId(context.request.body)
      const storeName = pathDefn.back.storeName || 'primary'
      context.body = await store.delete({ storeName, name, id }) // eslint-disable-line require-atomic-updates
    }
  }
}
