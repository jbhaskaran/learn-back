const SQS = require('aws-sdk/clients/sqs')

const defaultConfig = {
  get: {
    attributeNames: ['SentTimestamp'],
    maxNumberOfMessages: 10,
    messageAttributeNames: ['All'],
    visibilityTimeout: 20,
    waitTimeSeconds: 0
  },
  add: {
    delaySeconds: 10
  }
}

const sqsObjects = {}

const getSqsObject = config => {
  if (!sqsObjects[config.storeName]) {
    sqsObjects[config.storeName] = new SQS({
      apiVersion: '2012-11-05',
      ...config.config
    })
  }
  return sqsObjects[config.storeName]
}

const createQueue = ({ entry, config }) => {
  const params = {
    QueueName: config.config.queueName
  }
  const sqsClient = getSqsObject(config)
  return new Promise((resolve, reject) => {
    sqsClient.createQueue(params, function(err, data) {
      if (err) {
        reject(err)
      }
      resolve(data)
    })
  })
}

const deleteQueue = ({ entry, config }) => {
  const QueueUrl = `${config.config.endpoint}${config.config.queueName}`
  const params = {
    QueueUrl
  }
  const sqsClient = getSqsObject(config)
  return new Promise((resolve, reject) => {
    sqsClient.deleteQueue(params, function(err, data) {
      if (err) {
        reject(err)
      }
      resolve(data)
    })
  })
}

const applyStepEntry = async ({ entry, config }) => {
  return actions[entry.action]({ entry, config })
}

const logStepComplete = async stepIndex => {
  console.log(`log step complete ${stepIndex}`)
  return
}

const currentStep = async () => {
  console.log('in current step')
  return -1
}

const handleStepError = async err => {
  console.log(err)
  return
}

const close = async () => {}

const actions = {
  createObject: ({ entry, config }) => {
    createQueue({ entry, config })
  },
  deleteObject: ({ entry, config }) => {
    deleteQueue({ entry, config })
  }
}

module.exports = {
  init: () => {},
  get: async ({ config }) => {
    const QueueUrl = `${config.config.endpoint}${config.config.queueName}`
    const getConfig = config.get || {}
    const params = {
      AttributeNames:
        getConfig.attributeNames || defaultConfig.get.attributeNames,
      MaxNumberOfMessages:
        getConfig.maxNumberOfMessages || defaultConfig.get.maxNumberOfMessages,
      MessageAttributeNames:
        getConfig.messageAttributeNames ||
        defaultConfig.get.messageAttributeNames,
      QueueUrl,
      VisibilityTimeout:
        getConfig.visibilityTimeout || defaultConfig.get.visibilityTimeout,
      WaitTimeSeconds:
        getConfig.waitTimeSeconds || defaultConfig.get.waitTimeSeconds
    }
    const messages = await new Promise((res, rej) => {
      getSqsObject(config).receiveMessage(params, (err, data) => {
        if (err) {
          rej(err)
        } else if (data.Messages) {
          res(data.Messages)
        }
      })
    })
    return messages
  },
  add: async ({ objectData, config }) => {
    const QueueUrl = `${config.config.endpoint}${config.config.queueName}`
    const addConfig = config.add || {}
    const params = {
      DelaySeconds: addConfig.delaySeconds || defaultConfig.add.delaySeconds,
      MessageBody: JSON.stringify(objectData),
      QueueUrl
    }
    const result = await new Promise((res, rej) => {
      getSqsObject(config).sendMessage(params, (err, data) => {
        if (err) {
          rej(err)
        } else {
          res(data)
        }
      })
    })
    return result
  },
  delete: async ({ config, ReceiptHandle }) => {
    const QueueUrl = `${config.config.endpoint}${config.config.queueName}`
    const deleteParams = {
      QueueUrl,
      ReceiptHandle
    }
    const result = await new Promise((res, rej) => {
      getSqsObject(config).deleteMessage(deleteParams, (err, data) => {
        if (err) {
          rej(err)
        } else {
          res(data)
        }
      })
    })
    return result
  },
  applyStepEntry,
  currentStep,
  handleStepError,
  logStepComplete,
  close
}
