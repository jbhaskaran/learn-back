const MESSAGES_DEFAULT = require('./messages')
const VALIDATORS_DEFAULT = require('./validators')

let MESSAGES = MESSAGES_DEFAULT
let VALIDATORS = VALIDATORS_DEFAULT

const getErrorMessage = (errorName, tokens) => {
  let msgTemplate = MESSAGES[errorName.toUpperCase()]
  Object.keys(tokens).forEach(tokenName => {
    msgTemplate = msgTemplate.replace(`%${tokenName}%`, tokens[tokenName])
  })
  return msgTemplate
}

const validateEntry = async (objectName, name, value, definition) => {
  const validResult = {
    valid: true,
    error: ''
  }
  for (let validatorName in VALIDATORS) {
    const result = await VALIDATORS[validatorName]({
      objectName,
      name,
      value,
      definition
    })
    if (!result) {
      validResult.valid = false
      validResult.error = validatorName
      return validResult
    }
  }
  return validResult
}

module.exports = {
  registerMessages: messages => {
    MESSAGES = { ...MESSAGES, ...messages }
  },
  registerValidators: validators => {
    VALIDATORS = { ...VALIDATORS, ...validators }
  },
  run: async function({ objectName, body, objectDefinition }) {
    if (Array.isArray(body)) {
      return await this.runArray({ objectName, body, objectDefinition })
    }

    const result = {
      valid: true,
      errors: []
    }
    Object.keys(body).forEach(name => {
      if (!objectDefinition[name]) {
        result.valid = false
        result.errors.push(getErrorMessage('PROPERTY_NOT_DEFINED', { name }))
      }
    })
    for (let name in objectDefinition) {
      const validResult = await validateEntry(
        objectName,
        name,
        body[name],
        objectDefinition[name]
      )
      if (!validResult.valid) {
        result.valid = false
        result.errors.push({
          name,
          error: validResult.error,
          message: getErrorMessage(validResult.error, { name })
        })
      }
    }
    return result
  },
  runArray: async function({ objectName, body, objectDefinition }) {
    const result = {
      valid: true,
      errors: []
    }
    for (let i in body) {
      const item = body[i]
      const itemResult = await this.run({
        objectName,
        body: item,
        objectDefinition
      })
      result.valid = itemResult.valid
      result.errors.push(itemResult.errors)
    }
    return result
  }
}
